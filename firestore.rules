rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function for admin check
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // 1) Users: all authenticated users can read any user (for chat lists, etc.)
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null; // all authenticated users can read any user
      allow update, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();
    }

    // 2) Public service categories
    match /serviceCategories/{cat} {
      allow read: if true;
      allow create, update: if request.auth != null;
    }

    // 3) Taskers: public read/list, owner or admin writes
    match /taskers/{taskerId} {
      allow read, list: if true;
      allow create, update, delete: if request.auth != null && (request.auth.uid == taskerId || isAdmin());
      // Allow totalReviews updates by any authenticated user
      allow update: if request.auth != null && 
        (request.auth.uid == taskerId || isAdmin() || 
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalReviews'])));
    }

    // 4) Reviews: public read, authenticated users can create their own reviews
    match /reviews/{reviewId} {
      allow read: if true; // Anyone can read reviews
      allow create: if request.auth != null; // TEMPORARY: Allow any authenticated user to create reviews
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.reviewerId || isAdmin()); // Only reviewer or admin can modify
      allow list: if true; // Anyone can list reviews
    }

    // 5) Jobs: clients create; client, tasker, or admin can read;
    //    tasker can update status to approve/reject;
    //    client can update checkoutRequestId for payment;
    //    no deletes
    match /jobs/{jobId} {
      allow create: if request.auth != null
                 && request.resource.data.clientId == request.auth.uid;

      allow get, list: if request.auth != null
                     && (
                          resource.data.clientId == request.auth.uid
                       || resource.data.taskerId  == request.auth.uid
                       || isAdmin()
                        );

      allow update: if request.auth != null && (
        // Tasker approves/rejects
        (
        request.auth.uid == resource.data.taskerId &&
        request.resource.data.status in ['in_progress', 'rejected'] &&
        resource.data.status == 'pending_approval' &&
        (
          // approving: only status
          (
            request.resource.data.status == 'in_progress' &&
            request.writeFields.hasOnly(['status'])
          )
          ||
          // rejecting: status + reason fields
          (
            request.resource.data.status == 'rejected' &&
            request.writeFields.hasOnly([
              'status',
              'rejectionReason',
              'rejectionReasonText',
              'rejectedAt'
            ])
          )
        )
      )
        ||
        // Client kicks off STK-push by adding checkoutRequestId
        (
          request.auth.uid == resource.data.clientId
          && request.writeFields.hasOnly(['checkoutRequestId'])
          && resource.data.status in ['pending_approval','in_progress']
        )
         ||
        // — **DEMO ONLY**: client marks payment received into escrow —
        (
          request.auth.uid == resource.data.clientId
          // only these three fields…
          && request.writeFields.hasOnly(['status','paymentStatus','paymentDetails'])
          // …and they must be moving into escrow/paid
          && request.resource.data.status == 'in_escrow'
          && request.resource.data.paymentStatus == 'paid'
        )

        ||
        // Client submits rating & marks completed
         (
          request.auth.uid == resource.data.clientId
          && request.writeFields.hasOnly(['rating','status'])
          // no extra checks needed for testing
        )
        ||
        // Admin can do anything
        isAdmin()
      );

      allow delete: if false;
    }

    // 6) Conversations: only participants can read/write
    match /conversations/{convId} {
      // Allow create if the user is in the participants array of the new document
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants;
      // Allow read/write (update/delete) if the user is in the participants array of the existing document
      allow read, update, delete: if request.auth != null &&
        request.auth.uid in resource.data.participants;
    }

    // 7) TOP-LEVEL messages collection
    match /messages/{msgId} {
      allow read: if request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants;
      allow update, delete: if false;
    }

    // 8) Everything else locked down
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 