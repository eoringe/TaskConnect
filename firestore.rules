rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function for admin check
    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    // Users collection
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null; // all authenticated users can read any user
      allow update, delete: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();
    }

    // Service Categories collection
    match /serviceCategories/{cat} {
      allow read: if true;
    }

    // Taskers collection
    match /taskers/{taskerId} {
      allow read, list: if true;
      allow create, update, delete: if request.auth != null && (request.auth.uid == taskerId || isAdmin());
    }

    // Jobs collection
    match /jobs/{jobId} {
      allow create: if request.auth != null && 
        request.resource.data.clientId == request.auth.uid &&
        request.resource.data.keys().hasAll(['clientId', 'taskerId', 'amount', 'date', 'address', 'notes', 'status', 'paymentStatus', 'createdAt']);

      allow get, list: if request.auth != null && (
        resource.data.clientId == request.auth.uid ||
        resource.data.taskerId == request.auth.uid ||
        isAdmin() // Assuming you have an isAdmin() function
      );

      allow update: if request.auth != null && (
        // --- Tasker Actions ---
        // Allows a tasker to approve ('in_progress') or reject ('rejected') a job
        // that is currently 'pending_approval'. This is for the `handleUpdateRequest` function.
        (
          request.auth.uid == resource.data.taskerId &&
          request.writeFields.size() == 1 &&
          request.writeFields.hasAll(['status']) &&
          (request.resource.data.status == 'in_progress' || request.resource.data.status == 'rejected') &&
          resource.data.status == 'pending_approval'
        ) ||
        // --- Client Actions ---
        // Allows a client to add/update a `checkoutRequestId` to initiate payment.
        // This action is only allowed when the job has been approved by the tasker.
        (
          request.auth.uid == resource.data.clientId &&
          request.writeFields.size() == 1 &&
          request.writeFields.hasAll(['checkoutRequestId']) &&
          resource.data.status == 'in_progress'
        ) ||
        // --- Admin Actions ---
        isAdmin() // Admins can update any field
      );

      allow delete: if false; // Deleting jobs is not allowed.
    }

    // Conversations: only participants can read/write
    match /conversations/{convId} {
      // Allow create if the user is in the participants array of the new document
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants;
      // Allow read/write (update/delete) if the user is in the participants array of the existing document
      allow read, update, delete: if request.auth != null &&
        request.auth.uid in resource.data.participants;
    }

    // TOP-LEVEL messages collection
    match /messages/{msgId} {
      allow read: if request.auth != null &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.senderId &&
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(request.resource.data.conversationId)).data.participants;
      allow update, delete: if false;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 